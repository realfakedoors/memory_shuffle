{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","className","src","icon","alt","onClick","handleClickedSquare","Board","gridEdge","gridTemplateColumns","difficulty","gridTemplateRows","style","squares","map","square","Game","display","useState","board","setBoard","clicked","setClicked","highScore","setHighScore","setDifficulty","generateBoard","size","shuffle","Array","keys","slice","resetBoard","checkForDuplicates","isEqual","uniq","sort","length","useEffect","concat","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAkBeA,EAhBA,SAACC,GASd,OACE,qBAAKC,UAAU,SAAf,SACE,qBAAKC,IATA,gBAAkBF,EAAMG,KAAO,OASXC,IAAI,GAAGC,QANpC,WACEL,EAAMM,oBAAoBN,EAAMG,YCgBrBI,EApBD,SAACP,GAQb,IAAMQ,EAAW,CACfC,oBAAqB,UAAYT,EAAMU,WAAa,UACpDC,iBAAkB,UAAYX,EAAMU,WAAa,WAGnD,OACE,qBAAKT,UAAU,QAAQW,MAAOJ,EAA9B,SACGR,EAAMa,QAAQC,KAdnB,SAAwBC,GACtB,OACE,cAAC,EAAD,CAAQZ,KAAMY,EAAQT,oBAAqBN,EAAMM,4B,iDCmGxCU,EAlGF,WAAO,IAmCdC,EAnCa,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,OAEaF,mBAAS,IAFtB,mBAEVG,EAFU,KAEDC,EAFC,OAGiBJ,mBAAS,GAH1B,mBAGVK,EAHU,KAGCC,EAHD,OAImBN,mBAAS,GAJ5B,mBAIVR,EAJU,KAIEe,EAJF,KAYjB,SAASC,EAAcC,GACrBF,EAAcE,GACdP,EAASQ,IAAQ,YAAIC,MAAM,IAAIC,SAASC,MAAM,EAAGJ,EAAOA,IAG1D,SAASK,IACPP,EAAc,GACdH,EAAW,IAQb,SAASW,IACP,OAAKC,IAAQC,IAAKd,GAASe,OAAQf,EAAQe,SAAWf,EAAQgB,OAAS,EA2DzE,OAjFAC,qBAAU,WACJjB,EAAQgB,OAASd,GACnBC,EAAaD,EAAY,KAE1B,CAACF,EAAQgB,OAAQd,IA4BlBN,EADiB,IAAfP,EAEA,sBAAKT,UAAU,WAAf,UACE,oBAAGA,UAAU,eAAb,UACE,mBAAGA,UAAU,cAAb,0BADF,8BAIA,qBAAKA,UAAU,oBAAoBI,QAAS,WAAOqB,EAAc,IAAjE,oBACA,qBAAKzB,UAAU,oBAAoBI,QAAS,WAAOqB,EAAc,IAAjE,kBACA,qBAAKzB,UAAU,oBAAoBI,QAAS,WAAOqB,EAAc,IAAjE,oBACA,qBAAKzB,UAAU,oBAAoBI,QAAS,WAAOqB,EAAc,IAAjE,oBACA,qBAAKzB,UAAU,oBAAoBI,QAAS,WAAOqB,EAAc,IAAjE,oBAGKO,IAEP,sBAAKhC,UAAU,gBAAf,UACE,qEAAuC,uBAAvC,8BACA,wBAAQI,QAAS,WAAO2B,KAAxB,oCAMHC,KACDZ,EAAQgB,SAAW3B,EAAaA,EAiB9B,cAAC,EAAD,CACEG,QAASM,EACTb,oBA3DN,SAA6BH,GAC3BiB,EAASQ,IAAQT,IACjBG,EAAWD,EAAQkB,OAAOpC,KA0DtBO,WAAYA,IAjBd,sBAAKT,UAAU,iBAAf,UACE,oDAAsB,uBAAtB,sEACA,wBACEuC,KAAK,SACLnC,QAAS,WACP2B,KAHJ,4BAqBJ,sBAAK/B,UAAU,OAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,iDAAoBoB,EAAQgB,UAC5B,6CAAgBd,QAEjBN,M,YC7FPwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d3d92f76.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = (props) => {  \n  function iconLocator(){\n    return \"./icons/icon-\" + props.icon + \".svg\";\n  };\n  \n  function handleClick(){\n    props.handleClickedSquare(props.icon);\n  }\n\n  return (\n    <div className=\"square\">\n      <img src={iconLocator()} alt=\"\" onClick={handleClick} />\n    </div>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\n\nimport Square from \"./Square\";\n\nconst Board = (props) => {\n  function displaySquares(square) {\n    return (\n      <Square icon={square} handleClickedSquare={props.handleClickedSquare} />\n    );\n  }\n  \n  // Display a square grid regardless of difficulty.\n  const gridEdge = {\n    gridTemplateColumns: 'repeat(' + props.difficulty + ', auto)',\n    gridTemplateRows: 'repeat(' + props.difficulty + ', auto)',\n  };\n  \n  return (\n    <div className=\"board\" style={gridEdge}>\n      {props.squares.map(displaySquares)}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from \"react\";\n\nimport Board from \"./Board\";\n\nimport shuffle from \"lodash.shuffle\";\nimport isEqual from \"lodash.isequal\";\nimport uniq from \"lodash.uniq\";\n\nconst Game = () => {\n  const [board, setBoard] = useState([]);\n  const [clicked, setClicked] = useState([]);\n  const [highScore, setHighScore] = useState(0);\n  const [difficulty, setDifficulty] = useState(0);\n\n  useEffect(() => {\n    if (clicked.length > highScore) {\n      setHighScore(highScore + 1);\n    }\n  }, [clicked.length, highScore]);\n\n  function generateBoard(size) {\n    setDifficulty(size);\n    setBoard(shuffle([...Array(50).keys()]).slice(0, size * size));\n  }\n\n  function resetBoard() {\n    setDifficulty(0);\n    setClicked([]);\n  }\n\n  function handleClickedSquare(icon) {\n    setBoard(shuffle(board));\n    setClicked(clicked.concat(icon));\n  }\n\n  function checkForDuplicates() {\n    if (!isEqual(uniq(clicked).sort(), clicked.sort()) && clicked.length > 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  let display;\n\n  if (difficulty === 0) {\n    display = (\n      <div className=\"new-game\">\n        <p className=\"instructions\">\n          <p className=\"how-to-play\">How to play:</p>\n          Tap each icon only once!\n        </p>\n        <div className=\"difficulty-select\" onClick={() => {generateBoard(3);}}>Normal</div>\n        <div className=\"difficulty-select\" onClick={() => {generateBoard(4);}}>Hard</div>\n        <div className=\"difficulty-select\" onClick={() => {generateBoard(5);}}>Brutal</div>\n        <div className=\"difficulty-select\" onClick={() => {generateBoard(6);}}>Insane</div>\n        <div className=\"difficulty-select\" onClick={() => {generateBoard(7);}}>FML</div>\n      </div>\n    );\n  } else if (checkForDuplicates()) {\n    display = (\n      <div className=\"defeat-screen\">\n        <p>Whoops, you already hit that square!<br />Better luck next time...</p>\n        <button onClick={() => {resetBoard();}}>\n          Give it another go?\n        </button>\n      </div>\n    );\n  } else if (\n    !checkForDuplicates() &&\n    clicked.length === difficulty * difficulty\n  ) {\n    display = (\n      <div className=\"victory-screen\">\n        <p>You won! Hell yeah!<br />You must have a giant brain to be able to store all that memory!</p>\n        <button\n          type=\"submit\"\n          onClick={() => {\n            resetBoard();\n          }}\n        >\n          Once Again?\n        </button>\n      </div>\n    );\n  } else {\n    display = (\n      <Board\n        squares={board}\n        handleClickedSquare={handleClickedSquare}\n        difficulty={difficulty}\n      />\n    );\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"score-display\">\n        <p>Current Streak: {clicked.length}</p>\n        <p>High Score: {highScore}</p>\n      </div>\n      {display}\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Game from \"./components/Game\";\n\nimport \"./custom.css\";\nimport \"./reset.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}